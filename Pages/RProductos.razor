@page "/RProductos/{ProductoId:int}"

    <div class="card bg-dark text-light">
        <div class="card-body ">
            <h1>Registro Productos</h1>

            <EditForm Model="@productos" OnValidSubmit="Guardar">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label for="UsuarioId">Id</label>
                <div class="form-inline">
                    <InputNumber @bind-Value="productos.ProductoId" class="form-control " />
                    <button type="button" class="btn btn-success mx-sm-3" @onclick="Buscar">Buscar</button>
                </div>
                <br />
                <div class="form-group">
                    <label for="Descripcion">Descripcion</label>
                    <InputText @bind-Value="productos.Descripcion" class="form-control col-md-3 " />

                </div>
                <div class="form-group">
                    <label for="Proveedor">Proveedor</label>
                    <div class="form-group">
                        <InputSelect @bind-Value="@ProveedorSeleccionado" class="form-control col-md-3" @onchange="CargarProveedores" @onclick="CargarProveedores">
                            <option value="" disabled selected>Seleccione un proveedor</option>
                            @foreach (var item in listaProveedores)
                            {
                                <option value="@item.ProveedorId">@item.Nombres</option>
                            }
                        </InputSelect>
                    </div>
                </div>

                <div class="form-group">
                    <label for="Cantidad">Cantidad</label>
                    <InputNumber @bind-Value="productos.Cantidad" class="form-control col-md-1" />
                </div>
                <div class="form-group">
                    <label for="Precio">Precio</label>
                    <InputNumber @bind-Value="productos.Precio" class="form-control col-md-2" @onfocus="CargarGanancia" @onfocusin="CargarGanancia" @onfocusout="CargarGanancia" />
                </div>

                <div class="form-group">
                    <label for="FechaIngreso"> Fecha</label>
                    <InputDate @bind-Value="productos.FechaIngreso" class="form-control col-md-2" />

                </div>
                <div class="form-group">
                    <label for="Costo">Costo</label>
                    <InputNumber @bind-Value="productos.Costo" class="form-control col-md-2" @onfocus="CargarGanancia" @onfocusin="CargarGanancia" @onfocusout="CargarGanancia" />
                </div>
                
                <div class="form-group">
                    <label for="Ganancia">Ganancia</label>
                    <InputNumber readonly="readonly" @bind-Value="productos.Ganancia" class="form-control col-md-2"/>
                    
                </div>

                <br />

                <div class="form-group">
                    <button type="submit" class="col-md-2 btn btn-primary">Guardar</button>
                    <button type="button" class="col-md-2 btn btn-info" @onclick="Limpiar">Limpiar</button>
                    <button type="button" class="col-md-2 btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>

                <h3>@Mensaje</h3>
            </EditForm>
        </div>
    </div>

@code {
    [Parameter]
    public int ProductoId { get; set; }
    ControllersProducto controllers = new ControllersProducto();
    Productos productos = new Productos();

    private List<Proveedores> listaProveedores = new List<Proveedores>();
    ControllersProveedores controllersProveedores = new ControllersProveedores();

    private string ProveedorSeleccionado;

    private Proveedores proveedores;

    public string Mensaje;

    protected override void OnInitialized()
    {
        listaProveedores = controllersProveedores.GetList(e => true);
        if (ProductoId > 0)
        {
            productos.ProductoId = ProductoId;
            Buscar();
        }
    }
    public void CargarProveedores()
    {
        try
        {
            proveedores = controllersProveedores.Buscar(Convert.ToInt32(ProveedorSeleccionado));

        }
        catch (Exception)
        {

            throw;
        }
    }
    private void Guardar()
    {
        productos.ProveedoresId = Convert.ToInt32(ProveedorSeleccionado);

        if (productos.ProductoId == 0)
        {
            controllers.Guardar(productos);
            Mensaje = "Guardo";
            Limpiar();
        }
        else
        {
            if (controllers.Buscar(productos.ProductoId) != null)
            {
                controllers.Modificar(productos);
                Mensaje = "Modifico";
                Limpiar();
            }

        }
    }
    private void Limpiar()
    {
        productos = new Productos();
    }
    private void Eliminar()
    {
        if (productos.ProductoId != 0)
        {
            if (controllers.Buscar(productos.ProductoId) != null)
            {

                controllers.Eliminar(productos.ProductoId);
                Mensaje = "Eliminado";
                Limpiar();

            }
            else
            {
                Mensaje = "Id no existe";
            }

        }
        else
        {
            Mensaje = "Selecione un ID";
        }

    }
    private void Buscar()
    {
        if (productos.ProductoId != 0)
        {
            if (controllers.Buscar(productos.ProductoId) != null)
            {

                productos = controllers.Buscar(productos.ProductoId);

            }
            else
            {
                Mensaje = "Id no existe";
            }

        }
        else
        {
            Mensaje = "Selecione un ID";
        }


    }
    private void CargarGanancia()
    {
        try
        {
            productos.Ganancia = productos.Precio - productos.Costo;
        }
        catch (Exception)
        {

            throw;
        }
    }
}
