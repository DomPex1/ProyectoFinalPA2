@page "/RClientes/{ClienteId:int}"

@inject IToastService toastService


<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                SuccessClass="success-toast-override"
                SuccessIconClass="fa fa-thumbs-up"
                ErrorIconClass="fa fa-bug" />


<div class="card bg-dark text-light">
    <div class="card-body ">
        <h1>Registro Clientes</h1>

        <EditForm Model="@clientes" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label for="ClienteId">Id</label>
            <div class="form-inline">
                <InputNumber @bind-Value="clientes.ClienteId" class="form-control " />
                <button type="button" class="btn btn-success mx-sm-3" @onclick="Buscar">Buscar</button>
            </div>
            <br />
            <div class="form-group">
                <label for="Nombre">Nombre</label>
                <InputText @bind-Value="clientes.Nombre" class="form-control col-md-2" />

            </div>
            <div class="form-group">
                <label for="Tipodecliente">Tipo de cliente</label>
                <div class="form-group">
                    <InputSelect @bind-Value="@TipoclienteSeleccionado" class="form-control col-md-3" @onchange="CargarTipoCliente" @onclick="CargarTipoCliente">
                        <option value="" disabled selected>Seleccione un tipo de cliente</option>
                        @foreach (var item in listaTipoCliente)
                        {
                            <option value="@item.TipoClienteId">@item.Descripcion</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <div class="form-group">
                <label for="Nombre">Email</label>
                <InputText @bind-Value="clientes.Email" class="form-control col-md-2" />

            </div>
            <div class="form-group">
                <label for="Nombre">Telefono</label>
                <InputText @bind-Value="clientes.Telefono" class="form-control col-md-2" />

            </div>


            <br />

            <div class="form-group">

                <button type="button" class="col-md-2 btn btn-info" @onclick="Limpiar">Limpiar</button>
                <button type="submit" class="col-md-2 btn btn-primary">Guardar</button>
                <button type="button" class="col-md-2 btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>

            <BlazoredToasts />
        </EditForm>
    </div>
</div>



@code {
    [Parameter]
    public int ClienteId { get; set; }
    ControllersCliente controllers = new ControllersCliente();
    private string TipoclienteSeleccionado;
    private TipoCliente tipoCliente;
    private List<TipoCliente> listaTipoCliente = new List<TipoCliente>();
    Clientes clientes = new Clientes();
    public string Mensaje;
    ControllersTipoCliente controllersTipoCliente = new ControllersTipoCliente();
    protected override void OnInitialized()
    {
        if (ClienteId != 0)
        {
            listaTipoCliente = controllersTipoCliente.GetList(e => true);
            clientes.ClienteId = ClienteId;
            Buscar();
        }
    }
    private void Guardar()
    {   
        clientes.TipoCliente=Convert.ToInt32(TipoclienteSeleccionado);
        if (EmailExiste())
        {
            toastService.ShowError("Email en uso por otro cliente.", "Error");
            
            return;
        }

        if (clientes.ClienteId == 0)
        {
            controllers.Guardar(clientes);
            toastService.ShowSuccess("Cliente guardado.", "logrado con exito");
            Limpiar();
        }
        else
        {
            if (controllers.Buscar(clientes.ClienteId) != null)
            {
                controllers.Modificar(clientes);
                toastService.ShowSuccess("Cliente modificado.", "Exito");
                Limpiar();
            }

        }
    }
    private void Limpiar()
    {
        clientes = new Clientes();
        TipoclienteSeleccionado=string.Empty;

    }


    private void Eliminar()
    {

        if (clientes.ClienteId != 0)
        {
            if (controllers.Buscar(clientes.ClienteId) != null)
            {

                controllers.Eliminar(clientes.ClienteId);
                toastService.ShowSuccess("Cliente eliminado.", "logrado con exito");
                Limpiar();

            }
            else
            {
                toastService.ShowWarning("Id no existe.", "Precaución");
            }

        }
        else
        {
            toastService.ShowWarning("Selecione un ID.", "Precaución");
        }

    }
    private void Buscar()
    {

        if (clientes.ClienteId != 0)
        {
            if (controllers.Buscar(clientes.ClienteId) != null)
            {

                clientes = controllers.Buscar(clientes.ClienteId);
                toastService.ShowSuccess("Cliente encontrado.", "logrado con exito");

            }
            else
            {
                toastService.ShowWarning("Id no existe.", "Precaución");
            }

        }
        else
        {
            toastService.ShowWarning("Selecione un ID.", "Precaución");
        }


    }
    public void CargarTipoCliente()
    {
        try
        {
            tipoCliente = controllersTipoCliente.Buscar(Convert.ToInt32(TipoclienteSeleccionado));

        }
        catch (Exception)
        {

            throw;
        }
    }
    public bool EmailExiste()
    {
        bool paso = false;
        var Listado = new List<Clientes>();

        Listado = controllers.GetList(p => p.Email == clientes.Email);

        if (Listado.Count == 1)
        {
            if (clientes.ClienteId == 0)
                return paso = true;

            Clientes clienteTemporal = new Clientes();
            clienteTemporal = Listado[0];
            if (clienteTemporal.ClienteId != clientes.ClienteId)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }

}