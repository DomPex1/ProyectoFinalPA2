@page "/CQuejas"
@page  "/CQuejas/{I:int}"

    <style>
        a {
            text-decoration: none;
            display: inline-block;
            padding: 8px 16px;
        }

            a:hover {
                background-color: #ddd;
                color: black;
            }

        .previous {
            background-color: #808080;
            color: black;
        }

        .next {
            background-color: #4CAF50;
            color: white;
        }

        .round {
            border-radius: 50%;
        }
    </style>

<div class="card bg-info text-light">
    <div class="card-body ">
        <h3>Consulta de Quejas</h3>

        <div class="form-inline">

            <label for="filtro">Filtro</label>
            <div class="form-group mx-sm-3 mb-2">
                <select class="form-control" @bind="Filtro">
                    <option value="" disabled selected>Seleccione un Criterio</option>
                    <option value="Todo">Todo</option>
                    <option value="Id">Id</option>
                    <option value="Nombres">Nombres</option>
                    <option value="Usuario">Usuario</option>
                    <option value="Email">Email</option>
                </select>
            </div>
            <label for="criterio"> Criterio</label>
            <div class="form-group mx-sm-3 mb-2">

                <input type="search" class="form-control" @bind-value="Criterio" />
            </div>

            <button type="button" class="btn btn-success mx-sm-3 mb-2" @onclick="Buscar">Buscar</button>

        </div>


        <div class="form-inline">
            <input class="mx-sm-3 mb-2" type="checkbox" @bind-value="BuscarFecha" id="BuscarFecha"> Filtrar por Fecha

            <div class="form-group">
                <label for="DesdeFecha">Desde</label>
                <input id="DesdeFecha" type="date" @bind-value="DesdeFecha" class="form-control mx-sm-3 mb-2 " input />

                <label for="HastaFechaInput">Hasta</label>
                <input type="date" Id="HastaFechaInput" @bind-value="HastaFecha" class="form-control mx-sm-3 mb-2" />
            </div>
        </div>
        <br />

        <table class="table">
            <thead class="thead-light">
                <tr>
                    <th>QuejasId</th>
                    <th>Cliente</th>
                    <th>Descripcion</th>
                    <th>Fecha</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (listaPaginado.Count == 0)
                {
                    <tr>
                        <th colspan="12" style="color:white; text-align: center">"No hay datos que mostrar"</th>
                    </tr>
                }
                else
                {
                    @foreach (var item in listaPaginado)
                    {
                        <tr>
                            <th>@item.QuejasId</th>
                            <th>@item.ClienteId</th>
                            <th>@item.Descripcion</th>
                            <th>@item.Fecha.ToString("dd/MM/yyyy")</th>
                            <td><a class="btn btn-primary" href="RQuejas/@item.QuejasId">Ver</a></td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <a class="previous" @onclick="Anterior">&laquo; Previous</a>
        <a class="next" @onclick="Siguiente">Next &raquo;</a>

        <h5>@mensaje</h5>
    </div>
</div>

@code {

        private List<Quejas> lista { get; set; }
     private List<Quejas> listaPaginado { get; set; }
        public ControllersQuejas controller = new ControllersQuejas();


        private string Filtro { get; set; }
        private string Criterio { get; set; }
        private string mensaje;

        public bool BuscarFecha { get; set; }
        public DateTime DesdeFecha { get; set; }
        public DateTime HastaFecha { get; set; }

        [Parameter]
        public int I { get; set; }


    Paginacion paginacion = new Paginacion();


    Contexto Contexto = new Contexto();
    double conteo = 0;

        double paginas = 0;
    double cantidad = 0;
    int paginaActual = 0;

 
    protected override void OnInitialized()
    {
        lista = controller.GetList(p => true);
        listaPaginado = new List<Quejas>();
        DesdeFecha = DateTime.Now;
        HastaFecha = DateTime.Now;


       
    }
        private void Paginar()
    {

        paginaActual = 1;
        cantidad = lista.Count();
        paginas = Math.Ceiling(cantidad / paginacion.Mostrar);
        listaPaginado = lista.Take(paginacion.Mostrar).ToList();
    }

    private void Buscar()
    {

        try
        {
            Paginar();
          
            if (Filtro == null)
            {
                mensaje = "Debe seleccionar un Criterio";
            }
            else
            {
                lista = controller.GetList(a => true);

                if (lista.Count == 0)
                {
                    mensaje = "No hay Quejas";
                }
                else
                {
                    mensaje = "";
                    switch (Filtro)
                    {
                        case "Todo":
                            lista = controller.GetList(e => true);
                            break;
                        case "Id":
                            lista = controller.GetList(e => e.QuejasId == Convert.ToInt32(Criterio));
                            break;
                        case "Cliente":
                            lista = controller.GetList(e => e.ClienteId == Convert.ToInt32(Criterio));
                            break;
                        case "FormaPedido":
                            lista = controller.GetList(e => e.Descripcion == Criterio);
                            break;

                    }
                    if (BuscarFecha == true)
                    {
                        lista = controller.GetList(p => p.Fecha >= DesdeFecha.Date && p.Fecha <= HastaFecha.Date);
                    }
                }
            }
        }
        catch (Exception)
        {
            throw;
        }
    }
        private void Siguiente()
    {
        if (paginaActual < paginas)
        {
            paginaActual++;
            listaPaginado = lista
                .Skip((paginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();

        }
    }

    private void Anterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
            listaPaginado = lista
                .Skip((paginaActual - 1) * paginacion.Mostrar)
                .Take(paginacion.Mostrar)
                .ToList();
        }
    }
}