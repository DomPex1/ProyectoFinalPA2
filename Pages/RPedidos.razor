
@page "/RPedidos/{PedidosId:int}"

@inject IToastService toastService


<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="5"
                SuccessClass="success-toast-override"
                SuccessIconClass="fa fa-thumbs-up"
                ErrorIconClass="fa fa-bug" />

<div class="card bg-dark text-light">
    <div class="card-body ">
        <h1>Registro Pedidos</h1>

        <EditForm Model="@pedidos" OnValidSubmit="Guardar">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label for="PedidosId">Id</label>
            <div class="form-inline">
                <InputNumber @bind-Value="pedidos.PedidosId" class="form-control " />
                <button type="button" class="btn btn-success mx-sm-3" @onclick="Buscar">Buscar</button>
            </div>
            <br />
            <div class="form-group">
                <label for="Cliente">Cliente</label>
                <InputSelect @bind-Value="@ClienteSeleccionado" class="form-control col-md-3" @onchange="CargarCliente" @onclick="CargarCliente">
                    <option value="" disabled selected>Seleccione un cliente</option>
                    @foreach (var item in listaClientes)
                    {
                        <option value="@item.ClienteId">@item.Nombre</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="FormaPedido">Forma de pedido</label>
                <InputSelect @bind-Value="pedidos.FormaPedido" class="form-control col-md-3" @onchange="CargarCliente" @onclick="CargarCliente">
                    <option value="" disabled selected>Seleccione una forma de pedido</option>
                    <option>Credito</option>
                    <option>Contado</option>
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Fecha">Fecha</label>
                <InputDate @bind-Value="pedidos.FechaPedido" class="form-control col-md-2" />
            </div>
            <br />
            <div class="form-inline">
                <div class="form-group">
                    <label for="Producto">Producto</label>

                    <InputSelect @bind-Value="@ProductoSeleccionado" class="form-control mx-sm-3" @onchange="CargarProducto" @onclick="CargarProducto" @onfocusout="CargarCantidad" @onfocusin="CargarCantidad" @onfocus="CargarCantidad">
                        <option value="" disabled selected>Seleccione un Producto</option>
                        @foreach (var item in listaProductos)
                        {
                            <option value="@item.ProductoId">@item.Descripcion</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="Cantidad">Cantidad</label>
                    <InputNumber @bind-Value="pedidos.Cantidad" class="form-control mx-sm-3" />
                </div>
                <div class="form-group">
                    <label for="Disponible">Disponible</label>
                    <InputNumber class="form-control mx-sm-3" readonly="readonly" @bind-Value="disponible" />
                </div>
                <button type="button" class="btn btn-primary  mx-sm-3" @onclick="AgregarProducto">AgregarProducto</button>
            </div>

            <br />
            <div>
                <table class="table text-light">
                    <thead class="thead-light">
                        <tr>
                            <th>Id</th>
                            <th>ProductoId</th>
                            <th>Cantidad</th>
                            <th>Precio</th>
                            <th>SubTotal</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (listaProductos.Count == 0)
                        {
                            <option value="-1">No hay productos</option>
                        }
                        else
                        {
                            @foreach (var item in pedidos.Detalles)
                            {
                                <tr>
                                    <th>@item.PedidosDetalleId</th>
                                    <th>@item.ProductoId</th>
                                    <th>@item.Cantidad</th>
                                    <th>@item.Precio</th>
                                    <th>@item.SubTotal</th>
                                    <th><button type="button" class="btn btn-danger" @onclick="(()=> EliminarProducto(item))">Eliminar</button></th>

                                </tr>
                            }
                        }

                    </tbody>
                </table>
            </div>

            <div class="form-group">
                <label for="Total">Total</label>
                <InputNumber class="form-control col-md-2" readonly="readonly" @bind-Value="pedidos.Total" />
            </div>

            <br />

            <div class="form-group">
                <button type="submit" class="col-md-2 btn btn-primary">Guardar</button>
                <button type="button" class="col-md-2 btn btn-info" @onclick="Limpiar">Limpiar</button>
                <button type="button" class="col-md-2 btn btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>

            <BlazoredToasts />
        </EditForm>
    </div>
</div>

@code {

    [Parameter]
    public int PedidosId { get; set; }

    protected override void OnInitialized()
    {
        listaProductos = controllersProductos.GetList(e => true);
        listaClientes = controllersCliente.GetList(e => true);

        if (PedidosId > 0)
        {
            pedidos.PedidosId = PedidosId;
            Buscar();
        }
    }

    ControllersPedido controllers = new ControllersPedido();
    ControllersProducto controllersProductos = new ControllersProducto();
    ControllersCliente controllersCliente = new ControllersCliente();

    private List<Productos> listaProductos = new List<Productos>();
    private List<Clientes> listaClientes = new List<Clientes>();

    private string ProductoSeleccionado { get; set; }
    private string ClienteSeleccionado { get; set; }
    public int disponible = 0;

    private Productos productos;
    private Clientes Clientes;

    Pedidos pedidos = new Pedidos();
    public string Mensaje;
    Contexto db = new Contexto();



    private void Guardar()
    {
        pedidos.ProductoId = Convert.ToInt32(ProductoSeleccionado);
        pedidos.ClienteId = Convert.ToInt32(ClienteSeleccionado);
        if (pedidos.PedidosId == 0)
        {
            controllers.Guardar(pedidos);
            toastService.ShowSuccess("Pedido guardado.", "logrado con exito");
            Limpiar();
        }
        else
        {
            if (controllers.Buscar(pedidos.PedidosId) != null)
            {
                controllers.Modificar(pedidos);
                toastService.ShowSuccess("Pedido modificado.", "Exito");
                Limpiar();
            }

        }
    }
    public void CargarProducto()
    {
        try
        {
            productos = controllersProductos.Buscar(Convert.ToInt32(ProductoSeleccionado));


        }
        catch (Exception)
        {

            throw;
        }
    }
    public void CargarCliente()
    {
        try
        {
            Clientes = controllersCliente.Buscar(Convert.ToInt32(ClienteSeleccionado));

        }
        catch (Exception)
        {

            throw;
        }
    }
    public void CargarCantidad()
    {
        try
        {
            if (productos != null)
            {
                disponible = productos.Cantidad;
            }

        }
        catch (Exception)
        {

            throw;
        }
    }
    private void Limpiar()
    {
        pedidos = new Pedidos();
        disponible = 0;
        ClienteSeleccionado = string.Empty;
        ProductoSeleccionado = string.Empty;

    }
    private void Eliminar()
    {
        if (pedidos.PedidosId != 0)
        {
            if (controllers.Buscar(pedidos.PedidosId) != null)
            {

                controllers.Eliminar(pedidos.PedidosId);
                toastService.ShowSuccess("Pedido eliminado.", "logrado con exito");
                Limpiar();

            }
            else
            {
                toastService.ShowWarning("Id no existe.", "Precaución");
            }

        }
        else
        {
             toastService.ShowWarning("Selecione un ID.", "Precaución");
        }

    }
    private void Buscar()
    {
        if (pedidos.PedidosId != 0)
        {
            if (controllers.Buscar(pedidos.PedidosId) != null)
            {

                pedidos = controllers.Buscar(pedidos.PedidosId);
                toastService.ShowSuccess("Pedido encontrado.", "logrado con exito");


            }
            else
            {
                toastService.ShowWarning("Id no existe.", "Precaución");
            }

        }
        else
        {
            toastService.ShowWarning("Selecione un ID.", "Precaución");
        }


    }
    private void AgregarProducto()
    {

        if (productos == null)
        {
            Mensaje = "debe seleccionar un producto";
        }
        else
        {
            if (disponible < pedidos.Cantidad)
            {
                toastService.ShowWarning("Cantidad no puede pasar disponible.", "Precaución");
                
            }
            else
            {
                if (pedidos.Detalles.Any(i => i.ProductoId == productos.ProductoId))
                {
                    toastService.ShowWarning("Este producto ya esta seleccionado", "Precaución");
                    
                }
                else
                {
                    var prod = controllersProductos.Buscar(Convert.ToInt32(ProductoSeleccionado));

                    pedidos.Detalles.Add(new PedidosDetalle()
                    {
                        PedidosId = pedidos.PedidosId,
                        ProductoId = Convert.ToInt32(ProductoSeleccionado),
                        Cantidad = pedidos.Cantidad,
                        Precio = prod.Precio,
                        SubTotal = pedidos.Cantidad * prod.Precio

                    });
                    //productos = new Productos();

                    Calcular();
                }
            }
        }
    }
    private void EliminarProducto(PedidosDetalle detalle)
    {

        pedidos.Detalles.Remove(detalle);
        Calcular();

    }
    private void Calcular()
    {
        decimal total = 0;

        foreach (var item in pedidos.Detalles)
        {
            total += item.SubTotal;
        }

        pedidos.Total = total;


    }
}
